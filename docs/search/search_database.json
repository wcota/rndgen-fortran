var tipuesearch = {"pages":[{"title":" RNDGEN module ","text":"RNDGEN module Fortran Module: RNDGEN Description The Fortran module RNDGEN implements the KISS (Keep It Simple Stupid) random number generator as an object, facilitating the usage of multiple and independent generators. The code adaptation is derived from Thomas Vojta 's implementation available at http://web.mst.edu/~vojtat/class_5403/kiss05/rkiss05.f90 . For reference, the original source code can be found here , with the following information: ! Random number generator KISS05 after a suggestion by George Marsaglia ! in \"Random numbers for C: The END?\" posted on sci . crypt . random - numbers ! in 1999 ! ! version as in \"double precision RNGs\" in sci . math . num - analysis ! http : //sci.tech-archive.net/Archive/sci.math.num-analysis/2005-11/msg00352.html ! ! The KISS ( Keep It Simple Stupid ) random number generator . Combines : ! ( 1 ) The congruential generator x ( n )= 69069 * x ( n - 1 ) + 1327217885 , period 2 &#94; 32 . ! ( 2 ) A 3 - shift shift - register generator , period 2 &#94; 32 - 1 , ! ( 3 ) Two 16 - bit multiply - with - carry generators , period 597273182964842497 > 2 &#94; 59 ! Overall period > 2 &#94; 123 ! ! ! A call to rkiss05 () gives one random real in the interval [ 0 , 1 ), ! i . e ., 0 <= rkiss05 < 1 ! ! Before using rkiss05 call kissinit ( seed ) to initialize ! the generator by random integers produced by Park / Millers ! minimal standard LCG . ! Seed should be any positive integer . ! ! FORTRAN implementation by Thomas Vojta , vojta @ mst . edu ! built on a module found at www . fortran . com ! ! ! History : ! v0 .9 Dec 11 , 2010 first implementation ! V0 .91 Dec 11 , 2010 inlined internal function for the SR component ! v0 .92 Dec 13 , 2010 extra shuffle of seed in kissinit ! v093 Aug 13 , 2012 changed inter representation test to avoid data statements Usage Copy the file src/rndgen.f90 or add the package as a dependency using the Fortran Package Manager (Fpm): [dependencies] rndgen-fortran . git = \"https://github.com/wcota/rndgen-fortran\" Import the module using use rndgen_mod , and/or use rndgenPL_mod for the power-law number generator. Create the generator object by using type ( rndgen ) :: generator The generator requires a positive integer as a seed to initialize the generator with Park/Millers minimal standard LCG: integer :: seed = 294727492 call generator % init ( seed ) To generate a random number, use: generator%rnd() for a real number in the range [0,1) generator%int(i1, i2) for an integer number in the range [i1, i2] generator%real(r1, r2) for a real number in the range [r1, r2) generator%rnd_array(n) for a real array with numbers in range [0,1) with size n generator%rnd_array(n,i1,i2) for a integer array with numbers in the range [i1, i2] with size n generator%rnd_array(n,r1,r2) for a real array with numbers in the range [r1, r2) with size n Reset the generator (to start again with the same sequence) with generator%reset() . rndSeed IO It is possible to save and read the generated seeds. For that, an rndSeed object needs to be declared as type ( rndSeed ) :: seeds To save, use call generator%save_seed(seeds, file_unit) , where file_unit refers to an opened file unit. It will save the current seed in the object and also write it to the file unit. To read from a rndSeed object, use call generator%read_seed(seeds) , or to read from a file unit, use call generator%read_seed(seeds, file_unit) . Power-law random number generator The module rndgenPL_mod extends the generator to an integer power-law distribution. The code was adapted from Silvio C. Ferreira 's codes. Declare the object with type(rndgenPL) :: generatorPL , and initialize it with call generatorPL%initPL(kmin, kmax, gamma, seed) , allowing the generation of random numbers following a power-law $P(k) \\sim k&#94;{-\\gamma}$ for $k \\in [k_\\text{min}, k_\\text{max}]$. To generate the number, use generatorPL%rndPL() . To generate an array of size n , use generatorPL%rndPL_array(n) Running examples Using Fpm, execute: fpm run --example simple to run the first example. The list of examples is as follows: simple : Generates 10 random numbers between 0 and 1, integers between 5 and 2587, and floats between -5.2 and 100.9, resets, and repeats the process. arrays : Generates 10 random numbers between 0 and 1, integers between 5 and 2587, and floats between -5.2 and 100.9, resets, and repeats the process, using the array generator vojta : Original example by Thomas Vojta, from https://web.mst.edu/vojtat/class_5403/kiss05/rtest.f90 save : Generates 10 random numbers, resets, and saves the state after 5 runs. Then, reads from the file. 2gen : Runs two generators simultaneously. Usage: fpm run --example example-2gen -- seed1 seed2 2gen-invert : Same as the previous example, but swaps the seeds after a reset. PL : Generates four sequences of power-law distributed random numbers. PL-arrays : Generates an array of power-law distributed random numbers. Expected outputs are available at example/output-*.txt . Tested with gfortran , ifort , and ifx compilers. To use a specific compiler, run with fpm --compiler=ifort [...] . Developer Info Wesley Cota Assistant Professor of Physics at Federal University of Viçosa (UFV), Brazil","tags":"home","url":"index.html"},{"title":"rndgenPL – RNDGEN module ","text":"type, public, extends( rndgen ) :: rndgenPL Random number generator object for power-law distribution, adapted from Silvio C. Ferreira code.\nThe power-law distribution is given by P(k) = k&#94;(-gamma), where k is an integer between kmin and kmax. Inherits type~~rndgenpl~~InheritsGraph type~rndgenpl rndgenPL type~rndgen rndgen type~rndgenpl->type~rndgen type~rndseed rndSeed type~rndgen->type~rndseed seed Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial integer(kind=i4), public :: o_iseed type( rndSeed ), public :: seed real(kind=dp), private :: AA real(kind=dp), private :: expo real(kind=dp), private :: x0 real(kind=dp), private :: xc real(kind=dp), public :: gamma integer(kind=i4), public :: kmin integer(kind=i4), public :: kmax real(kind=dp), private, allocatable :: prob (:) Type-Bound Procedures procedure, public :: rnd => rnd_rndgen_dp private  function rnd_rndgen_dp (this) result(rnd_number) Generates a random number in the range [0, 1) Arguments Type Intent Optional Attributes Name class( rndgen ) :: this Return Value real(kind=dp) procedure, public :: int => int_rndgen_i4 private  function int_rndgen_i4 (this, i1, i2) result(rnd_number) Generates a random integer number in the range [i1, i2], int32 Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i4), intent(in) :: i1 integer(kind=i4), intent(in) :: i2 Return Value integer(kind=i4) procedure, public :: int_i4 => int_rndgen_i4 private  function int_rndgen_i4 (this, i1, i2) result(rnd_number) Generates a random integer number in the range [i1, i2], int32 Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i4), intent(in) :: i1 integer(kind=i4), intent(in) :: i2 Return Value integer(kind=i4) procedure, public :: int_i8 => int_rndgen_i8 private  function int_rndgen_i8 (this, i1, i2) result(rnd_number) Generates a random integer number in the range [i1, i2], int64 Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i8), intent(in) :: i1 integer(kind=i8), intent(in) :: i2 Return Value integer(kind=i8) procedure, public :: real => real_rndgen_dp private  function real_rndgen_dp (this, r1, r2) result(rnd_number) Generates a random real number in the range [r1, r2), double Arguments Type Intent Optional Attributes Name class( rndgen ) :: this real(kind=dp), intent(in) :: r1 real(kind=dp), intent(in) :: r2 Return Value real(kind=dp) procedure, public :: real_sp => real_rndgen_sp private  function real_rndgen_sp (this, r1, r2) result(rnd_number) Generates a random real number in the range [r1, r2), single Arguments Type Intent Optional Attributes Name class( rndgen ) :: this real(kind=sp), intent(in) :: r1 real(kind=sp), intent(in) :: r2 Return Value real(kind=sp) procedure, public :: init => init_rndgen private  subroutine init_rndgen (this, iseed) Initializes the random number generator Read more… Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i4) :: iseed procedure, public :: reset => reset_rndgen private  subroutine reset_rndgen (this) Resets the random number generator Arguments Type Intent Optional Attributes Name class( rndgen ) :: this procedure, public :: save_seed => save_seed_rndgen private  subroutine save_seed_rndgen (this, u_mseed, und) Save the current seeds to a seeds object and, optionally, to a file unit Arguments Type Intent Optional Attributes Name class( rndgen ) :: this type( rndSeed ), intent(out) :: u_mseed integer, intent(in), optional :: und procedure, public :: read_seed => read_seed_rndgen private  subroutine read_seed_rndgen (this, u_mseed, und) Read the seeds from a seeds object or, optionally, from a file unit Arguments Type Intent Optional Attributes Name class( rndgen ) :: this type( rndSeed ), intent(in) :: u_mseed integer, intent(in), optional :: und generic, public :: rnd_array => rnd_array_rnd , rnd_array_real , rnd_array_int_i4 private  function rnd_array_rnd (gen, n) result(arr) Generates a random array of real numbers in the range [0, 1) Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n Return Value real(kind=dp), allocatable, (:) private  function rnd_array_real (gen, n, r1, r2) result(arr) Generates a random array of real numbers in the range [r1, r2) Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n real(kind=dp), intent(in) :: r1 real(kind=dp), intent(in) :: r2 Return Value real(kind=dp), allocatable, (:) private  function rnd_array_int_i4 (gen, n, i1, i2) result(arr) Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n integer(kind=i4), intent(in) :: i1 integer(kind=i4), intent(in) :: i2 Return Value integer(kind=i4), allocatable, (:) procedure, public :: rnd_array_i4 => rnd_array_int_i4 private  function rnd_array_int_i4 (gen, n, i1, i2) result(arr) Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n integer(kind=i4), intent(in) :: i1 integer(kind=i4), intent(in) :: i2 Return Value integer(kind=i4), allocatable, (:) procedure, public :: rnd_array_i8 => rnd_array_int_i8 private  function rnd_array_int_i8 (gen, n, i1, i2) result(arr) Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n integer(kind=i8), intent(in) :: i1 integer(kind=i8), intent(in) :: i2 Return Value integer(kind=i8), allocatable, (:) procedure, public :: rndPL => rndPL_rndgenPL private  function rndPL_rndgenPL (this) result(rnd_number) Generates a random number following the power-law distribution Arguments Type Intent Optional Attributes Name class( rndgenPL ) :: this Return Value integer(kind=i4) procedure, public :: initPL => initPL_rndgenPL private  subroutine initPL_rndgenPL (this, kmin, kmax, gama, iseed) Initializes the power-law random number generator Arguments Type Intent Optional Attributes Name class( rndgenPL ) :: this integer(kind=i4), intent(in) :: kmin integer(kind=i4), intent(in) :: kmax real(kind=dp), intent(in) :: gama integer, intent(in), optional :: iseed procedure, public :: rndPL_array private  function rndPL_array (gen, n) result(arr) Arguments Type Intent Optional Attributes Name class( rndgenPL ), intent(in) :: gen integer(kind=i4), intent(in) :: n Return Value integer(kind=i4), allocatable, (:)","tags":"","url":"type/rndgenpl.html"},{"title":"rndSeed – RNDGEN module ","text":"type, public :: rndSeed Random seeds object Inherited by type~~rndseed~~InheritedByGraph type~rndseed rndSeed type~rndgen rndgen type~rndgen->type~rndseed seed type~rndgenpl rndgenPL type~rndgenpl->type~rndgen Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial integer(kind=i4), private :: mseed (4) Type-Bound Procedures procedure, private :: saveToFile_rndSeed private  subroutine saveToFile_rndSeed (this, und) Save the seeds to a file unit Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this integer, intent(in) :: und procedure, private :: saveToFile_filename_rndSeed private  subroutine saveToFile_filename_rndSeed (this, filename) Save the seeds to a file name Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this character(len=*), intent(in) :: filename procedure, private :: readFromFile_rndSeed private  subroutine readFromFile_rndSeed (this, und) Read the seeds from a file unit Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this integer, intent(in) :: und procedure, private :: readFromFile_filename_rndSeed private  subroutine readFromFile_filename_rndSeed (this, filename) Read the seeds from a file name Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this character(len=*), intent(in) :: filename generic, public :: saveToFile => saveToFile_rndSeed , saveToFile_filename_rndSeed private  subroutine saveToFile_rndSeed (this, und) Save the seeds to a file unit Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this integer, intent(in) :: und private  subroutine saveToFile_filename_rndSeed (this, filename) Save the seeds to a file name Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this character(len=*), intent(in) :: filename generic, public :: readFromFile => readFromFile_rndSeed , readFromFile_filename_rndSeed private  subroutine readFromFile_rndSeed (this, und) Read the seeds from a file unit Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this integer, intent(in) :: und private  subroutine readFromFile_filename_rndSeed (this, filename) Read the seeds from a file name Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this character(len=*), intent(in) :: filename","tags":"","url":"type/rndseed.html"},{"title":"rndgen – RNDGEN module ","text":"type, public :: rndgen Random number generator object with its procedures Inherits type~~rndgen~~InheritsGraph type~rndgen rndgen type~rndseed rndSeed type~rndgen->type~rndseed seed Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~rndgen~~InheritedByGraph type~rndgen rndgen type~rndgenpl rndgenPL type~rndgenpl->type~rndgen Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial integer(kind=i4), public :: o_iseed type( rndSeed ), public :: seed Type-Bound Procedures procedure, public :: rnd => rnd_rndgen_dp private  function rnd_rndgen_dp (this) result(rnd_number) Generates a random number in the range [0, 1) Arguments Type Intent Optional Attributes Name class( rndgen ) :: this Return Value real(kind=dp) procedure, public :: int => int_rndgen_i4 private  function int_rndgen_i4 (this, i1, i2) result(rnd_number) Generates a random integer number in the range [i1, i2], int32 Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i4), intent(in) :: i1 integer(kind=i4), intent(in) :: i2 Return Value integer(kind=i4) procedure, public :: int_i4 => int_rndgen_i4 private  function int_rndgen_i4 (this, i1, i2) result(rnd_number) Generates a random integer number in the range [i1, i2], int32 Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i4), intent(in) :: i1 integer(kind=i4), intent(in) :: i2 Return Value integer(kind=i4) procedure, public :: int_i8 => int_rndgen_i8 private  function int_rndgen_i8 (this, i1, i2) result(rnd_number) Generates a random integer number in the range [i1, i2], int64 Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i8), intent(in) :: i1 integer(kind=i8), intent(in) :: i2 Return Value integer(kind=i8) procedure, public :: real => real_rndgen_dp private  function real_rndgen_dp (this, r1, r2) result(rnd_number) Generates a random real number in the range [r1, r2), double Arguments Type Intent Optional Attributes Name class( rndgen ) :: this real(kind=dp), intent(in) :: r1 real(kind=dp), intent(in) :: r2 Return Value real(kind=dp) procedure, public :: real_sp => real_rndgen_sp private  function real_rndgen_sp (this, r1, r2) result(rnd_number) Generates a random real number in the range [r1, r2), single Arguments Type Intent Optional Attributes Name class( rndgen ) :: this real(kind=sp), intent(in) :: r1 real(kind=sp), intent(in) :: r2 Return Value real(kind=sp) procedure, public :: init => init_rndgen private  subroutine init_rndgen (this, iseed) Initializes the random number generator Read more… Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i4) :: iseed procedure, public :: reset => reset_rndgen private  subroutine reset_rndgen (this) Resets the random number generator Arguments Type Intent Optional Attributes Name class( rndgen ) :: this procedure, public :: save_seed => save_seed_rndgen private  subroutine save_seed_rndgen (this, u_mseed, und) Save the current seeds to a seeds object and, optionally, to a file unit Arguments Type Intent Optional Attributes Name class( rndgen ) :: this type( rndSeed ), intent(out) :: u_mseed integer, intent(in), optional :: und procedure, public :: read_seed => read_seed_rndgen private  subroutine read_seed_rndgen (this, u_mseed, und) Read the seeds from a seeds object or, optionally, from a file unit Arguments Type Intent Optional Attributes Name class( rndgen ) :: this type( rndSeed ), intent(in) :: u_mseed integer, intent(in), optional :: und generic, public :: rnd_array => rnd_array_rnd , rnd_array_real , rnd_array_int_i4 private  function rnd_array_rnd (gen, n) result(arr) Generates a random array of real numbers in the range [0, 1) Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n Return Value real(kind=dp), allocatable, (:) private  function rnd_array_real (gen, n, r1, r2) result(arr) Generates a random array of real numbers in the range [r1, r2) Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n real(kind=dp), intent(in) :: r1 real(kind=dp), intent(in) :: r2 Return Value real(kind=dp), allocatable, (:) private  function rnd_array_int_i4 (gen, n, i1, i2) result(arr) Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n integer(kind=i4), intent(in) :: i1 integer(kind=i4), intent(in) :: i2 Return Value integer(kind=i4), allocatable, (:) procedure, public :: rnd_array_i4 => rnd_array_int_i4 private  function rnd_array_int_i4 (gen, n, i1, i2) result(arr) Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n integer(kind=i4), intent(in) :: i1 integer(kind=i4), intent(in) :: i2 Return Value integer(kind=i4), allocatable, (:) procedure, public :: rnd_array_i8 => rnd_array_int_i8 private  function rnd_array_int_i8 (gen, n, i1, i2) result(arr) Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n integer(kind=i8), intent(in) :: i1 integer(kind=i8), intent(in) :: i2 Return Value integer(kind=i8), allocatable, (:) procedure, private :: rnd_array_rnd private  function rnd_array_rnd (gen, n) result(arr) Generates a random array of real numbers in the range [0, 1) Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n Return Value real(kind=dp), allocatable, (:) procedure, private :: rnd_array_real private  function rnd_array_real (gen, n, r1, r2) result(arr) Generates a random array of real numbers in the range [r1, r2) Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n real(kind=dp), intent(in) :: r1 real(kind=dp), intent(in) :: r2 Return Value real(kind=dp), allocatable, (:) procedure, private :: rnd_array_int_i4 private  function rnd_array_int_i4 (gen, n, i1, i2) result(arr) Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n integer(kind=i4), intent(in) :: i1 integer(kind=i4), intent(in) :: i2 Return Value integer(kind=i4), allocatable, (:)","tags":"","url":"type/rndgen.html"},{"title":"rndPL_rndgenPL – RNDGEN module","text":"private  function rndPL_rndgenPL(this) result(rnd_number) Generates a random number following the power-law distribution Type Bound rndgenPL Arguments Type Intent Optional Attributes Name class( rndgenPL ) :: this Return Value integer(kind=i4) Calls proc~~rndpl_rndgenpl~~CallsGraph proc~rndpl_rndgenpl rndgenPL%rndPL_rndgenPL proc~rnd_rndgen_dp rndgen%rnd_rndgen_dp proc~rndpl_rndgenpl->proc~rnd_rndgen_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~rndpl_rndgenpl~~CalledByGraph proc~rndpl_rndgenpl rndgenPL%rndPL_rndgenPL proc~rndpl_array rndgenPL%rndPL_array proc~rndpl_array->proc~rndpl_rndgenpl Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/rndpl_rndgenpl.html"},{"title":"rndPL_array – RNDGEN module","text":"private  function rndPL_array(gen, n) result(arr) Type Bound rndgenPL Arguments Type Intent Optional Attributes Name class( rndgenPL ), intent(in) :: gen integer(kind=i4), intent(in) :: n Return Value integer(kind=i4), allocatable, (:) Calls proc~~rndpl_array~~CallsGraph proc~rndpl_array rndgenPL%rndPL_array proc~rndpl_rndgenpl rndgenPL%rndPL_rndgenPL proc~rndpl_array->proc~rndpl_rndgenpl proc~rnd_rndgen_dp rndgen%rnd_rndgen_dp proc~rndpl_rndgenpl->proc~rnd_rndgen_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code function rndPL_array ( gen , n ) result ( arr ) class ( rndgenPL ), intent ( in ) :: gen integer ( kind = i4 ), intent ( in ) :: n integer ( kind = i4 ) :: i integer ( kind = i4 ), allocatable :: arr (:) arr = [( gen % rndPL (), i = 1 , n )] end function rndPL_array","tags":"","url":"proc/rndpl_array.html"},{"title":"initPL_rndgenPL – RNDGEN module","text":"private  subroutine initPL_rndgenPL(this, kmin, kmax, gama, iseed) Initializes the power-law random number generator Type Bound rndgenPL Arguments Type Intent Optional Attributes Name class( rndgenPL ) :: this integer(kind=i4), intent(in) :: kmin integer(kind=i4), intent(in) :: kmax real(kind=dp), intent(in) :: gama integer, intent(in), optional :: iseed Calls proc~~initpl_rndgenpl~~CallsGraph proc~initpl_rndgenpl rndgenPL%initPL_rndgenPL proc~init_rndgen rndgen%init_rndgen proc~initpl_rndgenpl->proc~init_rndgen proc~rnd_rndgen_dp rndgen%rnd_rndgen_dp proc~init_rndgen->proc~rnd_rndgen_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/initpl_rndgenpl.html"},{"title":"rnd_rndgen_dp – RNDGEN module","text":"private  function rnd_rndgen_dp(this) result(rnd_number) Generates a random number in the range [0, 1) Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ) :: this Return Value real(kind=dp) Called by proc~~rnd_rndgen_dp~~CalledByGraph proc~rnd_rndgen_dp rndgen%rnd_rndgen_dp proc~init_rndgen rndgen%init_rndgen proc~init_rndgen->proc~rnd_rndgen_dp proc~int_rndgen_i4 rndgen%int_rndgen_i4 proc~int_rndgen_i4->proc~rnd_rndgen_dp proc~int_rndgen_i8 rndgen%int_rndgen_i8 proc~int_rndgen_i8->proc~rnd_rndgen_dp proc~real_rndgen_dp rndgen%real_rndgen_dp proc~real_rndgen_dp->proc~rnd_rndgen_dp proc~rnd_array_rnd rndgen%rnd_array_rnd proc~rnd_array_rnd->proc~rnd_rndgen_dp proc~rndpl_rndgenpl rndgenPL%rndPL_rndgenPL proc~rndpl_rndgenpl->proc~rnd_rndgen_dp proc~initpl_rndgenpl rndgenPL%initPL_rndgenPL proc~initpl_rndgenpl->proc~init_rndgen proc~reset_rndgen rndgen%reset_rndgen proc~reset_rndgen->proc~init_rndgen proc~rnd_array_int_i4 rndgen%rnd_array_int_i4 proc~rnd_array_int_i4->proc~int_rndgen_i4 proc~rnd_array_int_i8 rndgen%rnd_array_int_i8 proc~rnd_array_int_i8->proc~int_rndgen_i8 proc~rndpl_array rndgenPL%rndPL_array proc~rndpl_array->proc~rndpl_rndgenpl Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/rnd_rndgen_dp.html"},{"title":"int_rndgen_i8 – RNDGEN module","text":"private  function int_rndgen_i8(this, i1, i2) result(rnd_number) Generates a random integer number in the range [i1, i2], int64 Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i8), intent(in) :: i1 integer(kind=i8), intent(in) :: i2 Return Value integer(kind=i8) Calls proc~~int_rndgen_i8~~CallsGraph proc~int_rndgen_i8 rndgen%int_rndgen_i8 proc~rnd_rndgen_dp rndgen%rnd_rndgen_dp proc~int_rndgen_i8->proc~rnd_rndgen_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~int_rndgen_i8~~CalledByGraph proc~int_rndgen_i8 rndgen%int_rndgen_i8 proc~rnd_array_int_i8 rndgen%rnd_array_int_i8 proc~rnd_array_int_i8->proc~int_rndgen_i8 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/int_rndgen_i8.html"},{"title":"int_rndgen_i4 – RNDGEN module","text":"private  function int_rndgen_i4(this, i1, i2) result(rnd_number) Generates a random integer number in the range [i1, i2], int32 Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i4), intent(in) :: i1 integer(kind=i4), intent(in) :: i2 Return Value integer(kind=i4) Calls proc~~int_rndgen_i4~~CallsGraph proc~int_rndgen_i4 rndgen%int_rndgen_i4 proc~rnd_rndgen_dp rndgen%rnd_rndgen_dp proc~int_rndgen_i4->proc~rnd_rndgen_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~int_rndgen_i4~~CalledByGraph proc~int_rndgen_i4 rndgen%int_rndgen_i4 proc~rnd_array_int_i4 rndgen%rnd_array_int_i4 proc~rnd_array_int_i4->proc~int_rndgen_i4 Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/int_rndgen_i4.html"},{"title":"real_rndgen_dp – RNDGEN module","text":"private  function real_rndgen_dp(this, r1, r2) result(rnd_number) Generates a random real number in the range [r1, r2), double Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ) :: this real(kind=dp), intent(in) :: r1 real(kind=dp), intent(in) :: r2 Return Value real(kind=dp) Calls proc~~real_rndgen_dp~~CallsGraph proc~real_rndgen_dp rndgen%real_rndgen_dp proc~rnd_rndgen_dp rndgen%rnd_rndgen_dp proc~real_rndgen_dp->proc~rnd_rndgen_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/real_rndgen_dp.html"},{"title":"real_rndgen_sp – RNDGEN module","text":"private  function real_rndgen_sp(this, r1, r2) result(rnd_number) Generates a random real number in the range [r1, r2), single Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ) :: this real(kind=sp), intent(in) :: r1 real(kind=sp), intent(in) :: r2 Return Value real(kind=sp)","tags":"","url":"proc/real_rndgen_sp.html"},{"title":"rnd_array_rnd – RNDGEN module","text":"private  function rnd_array_rnd(gen, n) result(arr) Generates a random array of real numbers in the range [0, 1) Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n Return Value real(kind=dp), allocatable, (:) Calls proc~~rnd_array_rnd~~CallsGraph proc~rnd_array_rnd rndgen%rnd_array_rnd proc~rnd_rndgen_dp rndgen%rnd_rndgen_dp proc~rnd_array_rnd->proc~rnd_rndgen_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code function rnd_array_rnd ( gen , n ) result ( arr ) class ( rndgen ), intent ( in ) :: gen integer ( kind = i4 ), intent ( in ) :: n integer ( kind = i4 ) :: i real ( kind = dp ), allocatable :: arr (:) arr = [( gen % rnd (), i = 1 , n )] end function rnd_array_rnd","tags":"","url":"proc/rnd_array_rnd.html"},{"title":"rnd_array_real – RNDGEN module","text":"private  function rnd_array_real(gen, n, r1, r2) result(arr) Generates a random array of real numbers in the range [r1, r2) Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n real(kind=dp), intent(in) :: r1 real(kind=dp), intent(in) :: r2 Return Value real(kind=dp), allocatable, (:) Source Code function rnd_array_real ( gen , n , r1 , r2 ) result ( arr ) class ( rndgen ), intent ( in ) :: gen integer ( kind = i4 ), intent ( in ) :: n real ( kind = dp ), intent ( in ) :: r1 , r2 integer ( kind = i4 ) :: i real ( kind = dp ), allocatable :: arr (:) arr = [( gen % real ( r1 , r2 ), i = 1 , n )] end function rnd_array_real","tags":"","url":"proc/rnd_array_real.html"},{"title":"rnd_array_int_i4 – RNDGEN module","text":"private  function rnd_array_int_i4(gen, n, i1, i2) result(arr) Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n integer(kind=i4), intent(in) :: i1 integer(kind=i4), intent(in) :: i2 Return Value integer(kind=i4), allocatable, (:) Calls proc~~rnd_array_int_i4~~CallsGraph proc~rnd_array_int_i4 rndgen%rnd_array_int_i4 proc~int_rndgen_i4 rndgen%int_rndgen_i4 proc~rnd_array_int_i4->proc~int_rndgen_i4 proc~rnd_rndgen_dp rndgen%rnd_rndgen_dp proc~int_rndgen_i4->proc~rnd_rndgen_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code function rnd_array_int_i4 ( gen , n , i1 , i2 ) result ( arr ) class ( rndgen ), intent ( in ) :: gen integer ( kind = i4 ), intent ( in ) :: n integer ( kind = i4 ), intent ( in ) :: i1 , i2 integer ( kind = i4 ) :: i integer ( kind = i4 ), allocatable :: arr (:) arr = [( gen % int_i4 ( i1 , i2 ), i = 1 , n )] end function rnd_array_int_i4","tags":"","url":"proc/rnd_array_int_i4.html"},{"title":"rnd_array_int_i8 – RNDGEN module","text":"private  function rnd_array_int_i8(gen, n, i1, i2) result(arr) Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n integer(kind=i8), intent(in) :: i1 integer(kind=i8), intent(in) :: i2 Return Value integer(kind=i8), allocatable, (:) Calls proc~~rnd_array_int_i8~~CallsGraph proc~rnd_array_int_i8 rndgen%rnd_array_int_i8 proc~int_rndgen_i8 rndgen%int_rndgen_i8 proc~rnd_array_int_i8->proc~int_rndgen_i8 proc~rnd_rndgen_dp rndgen%rnd_rndgen_dp proc~int_rndgen_i8->proc~rnd_rndgen_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Source Code function rnd_array_int_i8 ( gen , n , i1 , i2 ) result ( arr ) class ( rndgen ), intent ( in ) :: gen integer ( kind = i4 ), intent ( in ) :: n integer ( kind = i8 ), intent ( in ) :: i1 , i2 integer ( kind = i4 ) :: i integer ( kind = i8 ), allocatable :: arr (:) arr = [( gen % int_i8 ( i1 , i2 ), i = 1 , n )] end function rnd_array_int_i8","tags":"","url":"proc/rnd_array_int_i8.html"},{"title":"init_rndgen – RNDGEN module","text":"private  subroutine init_rndgen(this, iseed) Initializes the random number generator ! Test integer representation !!! Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i4) :: iseed Calls proc~~init_rndgen~~CallsGraph proc~init_rndgen rndgen%init_rndgen proc~rnd_rndgen_dp rndgen%rnd_rndgen_dp proc~init_rndgen->proc~rnd_rndgen_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~init_rndgen~~CalledByGraph proc~init_rndgen rndgen%init_rndgen proc~initpl_rndgenpl rndgenPL%initPL_rndgenPL proc~initpl_rndgenpl->proc~init_rndgen proc~reset_rndgen rndgen%reset_rndgen proc~reset_rndgen->proc~init_rndgen Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/init_rndgen.html"},{"title":"reset_rndgen – RNDGEN module","text":"private  subroutine reset_rndgen(this) Resets the random number generator Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ) :: this Calls proc~~reset_rndgen~~CallsGraph proc~reset_rndgen rndgen%reset_rndgen proc~init_rndgen rndgen%init_rndgen proc~reset_rndgen->proc~init_rndgen proc~rnd_rndgen_dp rndgen%rnd_rndgen_dp proc~init_rndgen->proc~rnd_rndgen_dp Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/reset_rndgen.html"},{"title":"save_seed_rndgen – RNDGEN module","text":"private  subroutine save_seed_rndgen(this, u_mseed, und) Save the current seeds to a seeds object and, optionally, to a file unit Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ) :: this type( rndSeed ), intent(out) :: u_mseed integer, intent(in), optional :: und Calls proc~~save_seed_rndgen~~CallsGraph proc~save_seed_rndgen rndgen%save_seed_rndgen none~savetofile rndSeed%saveToFile proc~save_seed_rndgen->none~savetofile proc~savetofile_filename_rndseed rndSeed%saveToFile_filename_rndSeed none~savetofile->proc~savetofile_filename_rndseed proc~savetofile_rndseed rndSeed%saveToFile_rndSeed none~savetofile->proc~savetofile_rndseed proc~savetofile_filename_rndseed->none~savetofile Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/save_seed_rndgen.html"},{"title":"read_seed_rndgen – RNDGEN module","text":"private  subroutine read_seed_rndgen(this, u_mseed, und) Read the seeds from a seeds object or, optionally, from a file unit Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ) :: this type( rndSeed ), intent(in) :: u_mseed integer, intent(in), optional :: und Calls proc~~read_seed_rndgen~~CallsGraph proc~read_seed_rndgen rndgen%read_seed_rndgen none~readfromfile rndSeed%readFromFile proc~read_seed_rndgen->none~readfromfile proc~readfromfile_filename_rndseed rndSeed%readFromFile_filename_rndSeed none~readfromfile->proc~readfromfile_filename_rndseed proc~readfromfile_rndseed rndSeed%readFromFile_rndSeed none~readfromfile->proc~readfromfile_rndseed proc~readfromfile_filename_rndseed->none~readfromfile Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/read_seed_rndgen.html"},{"title":"saveToFile_rndSeed – RNDGEN module","text":"private  subroutine saveToFile_rndSeed(this, und) Save the seeds to a file unit Type Bound rndSeed Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this integer, intent(in) :: und Called by proc~~savetofile_rndseed~~CalledByGraph proc~savetofile_rndseed rndSeed%saveToFile_rndSeed none~savetofile rndSeed%saveToFile none~savetofile->proc~savetofile_rndseed proc~savetofile_filename_rndseed rndSeed%saveToFile_filename_rndSeed none~savetofile->proc~savetofile_filename_rndseed proc~save_seed_rndgen rndgen%save_seed_rndgen proc~save_seed_rndgen->none~savetofile proc~savetofile_filename_rndseed->none~savetofile Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/savetofile_rndseed.html"},{"title":"saveToFile_filename_rndSeed – RNDGEN module","text":"private  subroutine saveToFile_filename_rndSeed(this, filename) Save the seeds to a file name Type Bound rndSeed Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this character(len=*), intent(in) :: filename Calls proc~~savetofile_filename_rndseed~~CallsGraph proc~savetofile_filename_rndseed rndSeed%saveToFile_filename_rndSeed none~savetofile rndSeed%saveToFile proc~savetofile_filename_rndseed->none~savetofile none~savetofile->proc~savetofile_filename_rndseed proc~savetofile_rndseed rndSeed%saveToFile_rndSeed none~savetofile->proc~savetofile_rndseed Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~savetofile_filename_rndseed~~CalledByGraph proc~savetofile_filename_rndseed rndSeed%saveToFile_filename_rndSeed none~savetofile rndSeed%saveToFile proc~savetofile_filename_rndseed->none~savetofile none~savetofile->proc~savetofile_filename_rndseed proc~save_seed_rndgen rndgen%save_seed_rndgen proc~save_seed_rndgen->none~savetofile Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/savetofile_filename_rndseed.html"},{"title":"readFromFile_rndSeed – RNDGEN module","text":"private  subroutine readFromFile_rndSeed(this, und) Read the seeds from a file unit Type Bound rndSeed Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this integer, intent(in) :: und Called by proc~~readfromfile_rndseed~~CalledByGraph proc~readfromfile_rndseed rndSeed%readFromFile_rndSeed none~readfromfile rndSeed%readFromFile none~readfromfile->proc~readfromfile_rndseed proc~readfromfile_filename_rndseed rndSeed%readFromFile_filename_rndSeed none~readfromfile->proc~readfromfile_filename_rndseed proc~read_seed_rndgen rndgen%read_seed_rndgen proc~read_seed_rndgen->none~readfromfile proc~readfromfile_filename_rndseed->none~readfromfile Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/readfromfile_rndseed.html"},{"title":"readFromFile_filename_rndSeed – RNDGEN module","text":"private  subroutine readFromFile_filename_rndSeed(this, filename) Read the seeds from a file name Type Bound rndSeed Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this character(len=*), intent(in) :: filename Calls proc~~readfromfile_filename_rndseed~~CallsGraph proc~readfromfile_filename_rndseed rndSeed%readFromFile_filename_rndSeed none~readfromfile rndSeed%readFromFile proc~readfromfile_filename_rndseed->none~readfromfile none~readfromfile->proc~readfromfile_filename_rndseed proc~readfromfile_rndseed rndSeed%readFromFile_rndSeed none~readfromfile->proc~readfromfile_rndseed Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~readfromfile_filename_rndseed~~CalledByGraph proc~readfromfile_filename_rndseed rndSeed%readFromFile_filename_rndSeed none~readfromfile rndSeed%readFromFile proc~readfromfile_filename_rndseed->none~readfromfile none~readfromfile->proc~readfromfile_filename_rndseed proc~read_seed_rndgen rndgen%read_seed_rndgen proc~read_seed_rndgen->none~readfromfile Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","url":"proc/readfromfile_filename_rndseed.html"},{"title":"rndgenPL_mod – RNDGEN module","text":"Uses rndgen_mod iso_fortran_env module~~rndgenpl_mod~~UsesGraph module~rndgenpl_mod rndgenPL_mod iso_fortran_env iso_fortran_env module~rndgenpl_mod->iso_fortran_env module~rndgen_mod rndgen_mod module~rndgenpl_mod->module~rndgen_mod module~rndgen_mod->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial real(kind=dp), private, parameter :: am = 4.656612873077392578d-10 Derived Types type, public, extends( rndgen ) :: rndgenPL Random number generator object for power-law distribution, adapted from Silvio C. Ferreira code.\nThe power-law distribution is given by P(k) = k&#94;(-gamma), where k is an integer between kmin and kmax. Components Type Visibility Attributes Name Initial integer(kind=i4), public :: o_iseed type( rndSeed ), public :: seed real(kind=dp), private :: AA real(kind=dp), private :: expo real(kind=dp), private :: x0 real(kind=dp), private :: xc real(kind=dp), public :: gamma integer(kind=i4), public :: kmin integer(kind=i4), public :: kmax real(kind=dp), private, allocatable :: prob (:) Type-Bound Procedures procedure, public :: rnd => rnd_rndgen_dp procedure, public :: int => int_rndgen_i4 procedure, public :: int_i4 => int_rndgen_i4 procedure, public :: int_i8 => int_rndgen_i8 procedure, public :: real => real_rndgen_dp procedure, public :: real_sp => real_rndgen_sp procedure, public :: init => init_rndgen procedure, public :: reset => reset_rndgen procedure, public :: save_seed => save_seed_rndgen procedure, public :: read_seed => read_seed_rndgen generic, public :: rnd_array => rnd_array_rnd , rnd_array_real , rnd_array_int_i4 procedure, public :: rnd_array_i4 => rnd_array_int_i4 procedure, public :: rnd_array_i8 => rnd_array_int_i8 procedure, public :: rndPL => rndPL_rndgenPL procedure, public :: initPL => initPL_rndgenPL procedure, public :: rndPL_array Functions private  function rndPL_rndgenPL (this) result(rnd_number) Generates a random number following the power-law distribution Arguments Type Intent Optional Attributes Name class( rndgenPL ) :: this Return Value integer(kind=i4) private  function rndPL_array (gen, n) result(arr) Arguments Type Intent Optional Attributes Name class( rndgenPL ), intent(in) :: gen integer(kind=i4), intent(in) :: n Return Value integer(kind=i4), allocatable, (:) Subroutines private  subroutine initPL_rndgenPL (this, kmin, kmax, gama, iseed) Initializes the power-law random number generator Arguments Type Intent Optional Attributes Name class( rndgenPL ) :: this integer(kind=i4), intent(in) :: kmin integer(kind=i4), intent(in) :: kmax real(kind=dp), intent(in) :: gama integer, intent(in), optional :: iseed","tags":"","url":"module/rndgenpl_mod.html"},{"title":"rndgen_mod – RNDGEN module","text":"Uses iso_fortran_env module~~rndgen_mod~~UsesGraph module~rndgen_mod rndgen_mod iso_fortran_env iso_fortran_env module~rndgen_mod->iso_fortran_env Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Used by module~~rndgen_mod~~UsedByGraph module~rndgen_mod rndgen_mod module~rndgenpl_mod rndgenPL_mod module~rndgenpl_mod->module~rndgen_mod Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial real(kind=dp), private, parameter :: am = 4.656612873077392578d-10 Derived Types type, public :: rndSeed Random seeds object Components Type Visibility Attributes Name Initial integer(kind=i4), private :: mseed (4) Type-Bound Procedures procedure, private :: saveToFile_rndSeed procedure, private :: saveToFile_filename_rndSeed procedure, private :: readFromFile_rndSeed procedure, private :: readFromFile_filename_rndSeed generic, public :: saveToFile => saveToFile_rndSeed , saveToFile_filename_rndSeed generic, public :: readFromFile => readFromFile_rndSeed , readFromFile_filename_rndSeed type, public :: rndgen Random number generator object with its procedures Components Type Visibility Attributes Name Initial integer(kind=i4), public :: o_iseed type( rndSeed ), public :: seed Type-Bound Procedures procedure, public :: rnd => rnd_rndgen_dp procedure, public :: int => int_rndgen_i4 procedure, public :: int_i4 => int_rndgen_i4 procedure, public :: int_i8 => int_rndgen_i8 procedure, public :: real => real_rndgen_dp procedure, public :: real_sp => real_rndgen_sp procedure, public :: init => init_rndgen procedure, public :: reset => reset_rndgen procedure, public :: save_seed => save_seed_rndgen procedure, public :: read_seed => read_seed_rndgen generic, public :: rnd_array => rnd_array_rnd , rnd_array_real , rnd_array_int_i4 procedure, public :: rnd_array_i4 => rnd_array_int_i4 procedure, public :: rnd_array_i8 => rnd_array_int_i8 procedure, private :: rnd_array_rnd procedure, private :: rnd_array_real procedure, private :: rnd_array_int_i4 Functions private  function rnd_rndgen_dp (this) result(rnd_number) Generates a random number in the range [0, 1) Arguments Type Intent Optional Attributes Name class( rndgen ) :: this Return Value real(kind=dp) private  function int_rndgen_i8 (this, i1, i2) result(rnd_number) Generates a random integer number in the range [i1, i2], int64 Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i8), intent(in) :: i1 integer(kind=i8), intent(in) :: i2 Return Value integer(kind=i8) private  function int_rndgen_i4 (this, i1, i2) result(rnd_number) Generates a random integer number in the range [i1, i2], int32 Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i4), intent(in) :: i1 integer(kind=i4), intent(in) :: i2 Return Value integer(kind=i4) private  function real_rndgen_dp (this, r1, r2) result(rnd_number) Generates a random real number in the range [r1, r2), double Arguments Type Intent Optional Attributes Name class( rndgen ) :: this real(kind=dp), intent(in) :: r1 real(kind=dp), intent(in) :: r2 Return Value real(kind=dp) private  function real_rndgen_sp (this, r1, r2) result(rnd_number) Generates a random real number in the range [r1, r2), single Arguments Type Intent Optional Attributes Name class( rndgen ) :: this real(kind=sp), intent(in) :: r1 real(kind=sp), intent(in) :: r2 Return Value real(kind=sp) private  function rnd_array_rnd (gen, n) result(arr) Generates a random array of real numbers in the range [0, 1) Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n Return Value real(kind=dp), allocatable, (:) private  function rnd_array_real (gen, n, r1, r2) result(arr) Generates a random array of real numbers in the range [r1, r2) Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n real(kind=dp), intent(in) :: r1 real(kind=dp), intent(in) :: r2 Return Value real(kind=dp), allocatable, (:) private  function rnd_array_int_i4 (gen, n, i1, i2) result(arr) Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n integer(kind=i4), intent(in) :: i1 integer(kind=i4), intent(in) :: i2 Return Value integer(kind=i4), allocatable, (:) private  function rnd_array_int_i8 (gen, n, i1, i2) result(arr) Arguments Type Intent Optional Attributes Name class( rndgen ), intent(in) :: gen integer(kind=i4), intent(in) :: n integer(kind=i8), intent(in) :: i1 integer(kind=i8), intent(in) :: i2 Return Value integer(kind=i8), allocatable, (:) Subroutines private  subroutine init_rndgen (this, iseed) Initializes the random number generator Read more… Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i4) :: iseed private  subroutine reset_rndgen (this) Resets the random number generator Arguments Type Intent Optional Attributes Name class( rndgen ) :: this private  subroutine save_seed_rndgen (this, u_mseed, und) Save the current seeds to a seeds object and, optionally, to a file unit Arguments Type Intent Optional Attributes Name class( rndgen ) :: this type( rndSeed ), intent(out) :: u_mseed integer, intent(in), optional :: und private  subroutine read_seed_rndgen (this, u_mseed, und) Read the seeds from a seeds object or, optionally, from a file unit Arguments Type Intent Optional Attributes Name class( rndgen ) :: this type( rndSeed ), intent(in) :: u_mseed integer, intent(in), optional :: und private  subroutine saveToFile_rndSeed (this, und) Save the seeds to a file unit Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this integer, intent(in) :: und private  subroutine saveToFile_filename_rndSeed (this, filename) Save the seeds to a file name Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this character(len=*), intent(in) :: filename private  subroutine readFromFile_rndSeed (this, und) Read the seeds from a file unit Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this integer, intent(in) :: und private  subroutine readFromFile_filename_rndSeed (this, filename) Read the seeds from a file name Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this character(len=*), intent(in) :: filename","tags":"","url":"module/rndgen_mod.html"},{"title":"rndgenPL.f90 – RNDGEN module","text":"This file depends on sourcefile~~rndgenpl.f90~~EfferentGraph sourcefile~rndgenpl.f90 rndgenPL.f90 sourcefile~rndgen.f90 rndgen.f90 sourcefile~rndgenpl.f90->sourcefile~rndgen.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code module rndgenPL_mod use iso_fortran_env , only : i4 => int32 , i8 => int64 , sp => real32 , dp => real64 use rndgen_mod implicit none private real ( kind = dp ), parameter :: am = 4.656612873077392578d-10 ! multiplier 1/2&#94;31 !> Random number generator object for power-law distribution, adapted from Silvio C. Ferreira code. !> The power-law distribution is given by P(k) = k&#94;(-gamma), where k is an integer between kmin and kmax. type , extends ( rndgen ) :: rndgenPL ! auxiliar variables real ( kind = dp ), private :: AA , expo , x0 , xc ! parameters real ( kind = dp ) :: gamma integer ( kind = i4 ) :: kmin , kmax ! auxiliar distribution real ( kind = dp ), private , allocatable :: prob (:) contains procedure :: rndPL => rndPL_rndgenPL ! generates a random number following the power-law distribution procedure :: initPL => initPL_rndgenPL ! initializes the power-law random number generator procedure :: rndPL_array ! generate an array with PL distribution end type public :: rndgenPL contains !> Initializes the power-law random number generator subroutine initPL_rndgenPL ( this , kmin , kmax , gama , iseed ) class ( rndgenPL ) :: this integer ( kind = i4 ), intent ( in ) :: kmin , kmax real ( kind = dp ), intent ( in ) :: gama integer , intent ( in ), optional :: iseed integer ( kind = kind ( kmax )) :: j if ( present ( iseed )) call this % init ( iseed ) this % kmin = kmin this % kmax = kmax this % gamma = gama if ( allocated ( this % prob )) deallocate ( this % prob ) allocate ( this % prob ( kmin : kmax )) this % AA = 0 d0 do j = kmin , kmax this % AA = this % AA + ( 1.0_dp * j ) ** ( - gama ) this % prob ( j ) = ( 1.0_dp * j ) ** ( - gama ) end do this % AA = 1.0_dp / this % AA this % prob = this % AA * this % prob this % x0 = ( 1.0_dp * ( kmin - 1 )) ** ( - gama + 1.0_dp ) this % xc = ( 1.0_dp * kmax ) ** ( - gama + 1.0_dp ) this % expo = 1.0_dp / ( 1.0_dp - gama ) end subroutine !> Generates a random number following the power-law distribution function rndPL_rndgenPL ( this ) result ( rnd_number ) class ( rndgenPL ) :: this real ( kind = dp ) :: z , x integer ( kind = i4 ) :: j , rnd_number do j = this % kmin - 1 do while ( j < this % kmin ) z = this % rnd () x = ( this % x0 - z * ( this % x0 - this % xc )) ** this % expo j = ceiling ( x ) end do z = this % rnd () if (. not . z * this % AA / ( x ** this % gamma ) >= this % prob ( j )) exit end do rnd_number = j end function function rndPL_array ( gen , n ) result ( arr ) class ( rndgenPL ), intent ( in ) :: gen integer ( kind = i4 ), intent ( in ) :: n integer ( kind = i4 ) :: i integer ( kind = i4 ), allocatable :: arr (:) arr = [( gen % rndPL (), i = 1 , n )] end function rndPL_array end module","tags":"","url":"sourcefile/rndgenpl.f90.html"},{"title":"rndgen.f90 – RNDGEN module","text":"Files dependent on this one sourcefile~~rndgen.f90~~AfferentGraph sourcefile~rndgen.f90 rndgen.f90 sourcefile~rndgenpl.f90 rndgenPL.f90 sourcefile~rndgenpl.f90->sourcefile~rndgen.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code ! ## File: rndgen.f90 ! ## - module: random number generator. This is just a module to be used in another program. ! ## See README.md for more information and usage !----------------------------------------------------------------------------- ! KISS random generator module, as object: can have multiple and independent generators! ! IMPORTANT: ! THIS CODE WAS MODIFIED FROM http://web.mst.edu/~vojtat/class_5403/kiss05/rkiss05.f90 ! ! FORTRAN implementation by Thomas Vojta, vojta@mst.edu ! ! built on a module found at www.fortran.com ! ! Copyright (C) 2017 Wesley Cota ! !    This program is free software: you can redistribute it and/or modify !    it under the terms of the GNU General Public License as published by !    the Free Software Foundation, either version 3 of the License, or !    (at your option) any later version. ! !    This program is distributed in the hope that it will be useful, !    but WITHOUT ANY WARRANTY; without even the implied warranty of !    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the !    GNU General Public License for more details. ! !    You should have received a copy of the GNU General Public License !    along with this program.  If not, see <http://www.gnu.org/licenses/>. !----------------------------------------------------------------------------- ! Author    : Wesley Cota ! Email     : wesley@wcota.me ! Homepage  : http://wcota.me ! Date      : 08 Jun 2025 ! Version   : 1.0.3 !----------------------------------------------------------------------------- module rndgen_mod use iso_fortran_env , only : i4 => int32 , i8 => int64 , sp => real32 , dp => real64 implicit none private real ( kind = dp ), parameter :: am = 4.656612873077392578d-10 ! multiplier 1/2&#94;31 !> Random seeds object type :: rndSeed integer ( kind = i4 ), private :: mseed ( 4 ) contains procedure , private :: saveToFile_rndSeed procedure , private :: saveToFile_filename_rndSeed procedure , private :: readFromFile_rndSeed procedure , private :: readFromFile_filename_rndSeed generic :: saveToFile => saveToFile_rndSeed , saveToFile_filename_rndSeed generic :: readFromFile => readFromFile_rndSeed , readFromFile_filename_rndSeed end type !> Random number generator object with its procedures type :: rndgen integer ( kind = i4 ) :: o_iseed ! seed used to generate the four new seeds type ( rndSeed ) :: seed contains procedure :: rnd => rnd_rndgen_dp ! generates a random number in the range [0, 1) procedure :: int => int_rndgen_i4 ! generates a random integer number in the range [i1, i2] ! aliases: procedure :: int_i4 => int_rndgen_i4 procedure :: int_i8 => int_rndgen_i8 procedure :: real => real_rndgen_dp ! generates a random real number in the range [r1, r2) procedure :: real_sp => real_rndgen_sp ! generates a random real number in the range [r1, r2) procedure :: init => init_rndgen procedure :: reset => reset_rndgen procedure :: save_seed => save_seed_rndgen procedure :: read_seed => read_seed_rndgen generic :: rnd_array => rnd_array_rnd , rnd_array_real , rnd_array_int_i4 procedure :: rnd_array_i4 => rnd_array_int_i4 procedure :: rnd_array_i8 => rnd_array_int_i8 procedure , private :: rnd_array_rnd procedure , private :: rnd_array_real procedure , private :: rnd_array_int_i4 end type public :: rndgen , rndSeed contains !> Generates a random number in the range [0, 1) function rnd_rndgen_dp ( this ) result ( rnd_number ) ! KISS ! Adapted from <http://web.mst.edu/~vojtat/class_5403/kiss05/rkiss05.f90> by Thomas Vojta class ( rndgen ) :: this integer ( kind = i8 ) :: kiss real ( kind = dp ) :: rnd_number this % seed % mseed ( 1 ) = 69069 * this % seed % mseed ( 1 ) + 1327217885 this % seed % mseed ( 2 ) = ieor ( this % seed % mseed ( 2 ), ishft ( this % seed % mseed ( 2 ), 13 )); this % seed % mseed ( 2 ) = ieor ( this % seed % mseed ( 2 ), ishft ( this % seed % mseed ( 2 ), - 17 )); this % seed % mseed ( 2 ) = ieor ( this % seed % mseed ( 2 ), ishft ( this % seed % mseed ( 2 ), 5 )) this % seed % mseed ( 3 ) = 18000 * iand ( this % seed % mseed ( 3 ), 65535 ) + ishft ( this % seed % mseed ( 3 ), - 16 ) this % seed % mseed ( 4 ) = 30903 * iand ( this % seed % mseed ( 4 ), 65535 ) + ishft ( this % seed % mseed ( 4 ), - 16 ) kiss = ishft ( this % seed % mseed ( 1 ) + this % seed % mseed ( 2 ) + ishft ( this % seed % mseed ( 3 ), 16 ) + this % seed % mseed ( 4 ), - 1 ) rnd_number = kiss * am ! returns in range [0, 1) end function !> Generates a random integer number in the range [i1, i2], int64 function int_rndgen_i8 ( this , i1 , i2 ) result ( rnd_number ) class ( rndgen ) :: this integer ( kind = i8 ), intent ( in ) :: i1 , i2 integer ( kind = i8 ) :: rnd_number rnd_number = min ( int ( this % rnd () * ( i2 + 1 - i1 )) + i1 , i2 ) ! returns in range [i1, i2] end function !> Generates a random integer number in the range [i1, i2], int32 function int_rndgen_i4 ( this , i1 , i2 ) result ( rnd_number ) class ( rndgen ) :: this integer ( kind = i4 ), intent ( in ) :: i1 , i2 integer ( kind = i4 ) :: rnd_number rnd_number = min ( int ( this % rnd () * ( i2 + 1 - i1 )) + i1 , i2 ) ! returns in range [i1, i2] end function !> Generates a random real number in the range [r1, r2), double function real_rndgen_dp ( this , r1 , r2 ) result ( rnd_number ) class ( rndgen ) :: this real ( kind = dp ), intent ( in ) :: r1 , r2 real ( kind = dp ) :: rnd_number rnd_number = r1 + ( r2 - r1 ) * this % rnd () ! returns in range [r1, r2) end function !> Generates a random real number in the range [r1, r2), single function real_rndgen_sp ( this , r1 , r2 ) result ( rnd_number ) class ( rndgen ) :: this real ( kind = sp ), intent ( in ) :: r1 , r2 real ( kind = sp ) :: rnd_number rnd_number = real ( this % real ( real ( r1 , kind = dp ), real ( r2 , kind = dp )), kind = sp ) ! returns in range [r1, r2) end function !> Initializes the random number generator subroutine init_rndgen ( this , iseed ) ! Adapted from <http://web.mst.edu/~vojtat/class_5403/kiss05/rkiss05.f90> by Thomas Vojta class ( rndgen ) :: this integer ( kind = i4 ) :: idum , ia , im , iq , ir , iseed , iseed_var integer ( kind = i4 ) :: k , c1 real ( kind = dp ) :: rdum parameter ( ia = 16807 , im = 2147483647 , iq = 127773 , ir = 2836 ) iseed_var = abs ( iseed ) ! must be positive! this % o_iseed = iseed_var !!! Test integer representation !!! c1 = - 8 c1 = ishftc ( c1 , - 3 ) !     print *,c1 if ( c1 /= 536870911 ) stop 'Nonstandard integer representation. Stopped.' idum = iseed_var idum = abs ( 1099087573 * idum ) ! 32-bit LCG to shuffle seeds if ( idum == 0 ) idum = 1 if ( idum >= IM ) idum = IM - 1 k = ( idum ) / IQ idum = IA * ( idum - k * IQ ) - IR * k if ( idum < 0 ) idum = idum + IM if ( idum < 1 ) then this % seed % mseed ( 1 ) = idum + 1 else this % seed % mseed ( 1 ) = idum end if k = ( idum ) / IQ idum = IA * ( idum - k * IQ ) - IR * k if ( idum < 0 ) idum = idum + IM if ( idum < 1 ) then this % seed % mseed ( 2 ) = idum + 1 else this % seed % mseed ( 2 ) = idum end if k = ( idum ) / IQ idum = IA * ( idum - k * IQ ) - IR * k if ( idum < 0 ) idum = idum + IM if ( idum < 1 ) then this % seed % mseed ( 3 ) = idum + 1 else this % seed % mseed ( 3 ) = idum end if k = ( idum ) / IQ idum = IA * ( idum - k * IQ ) - IR * k if ( idum < 0 ) idum = idum + IM if ( idum < 1 ) then this % seed % mseed ( 4 ) = idum + 1 else this % seed % mseed ( 4 ) = idum end if rdum = this % rnd () ! warm up the generator with the first random number end subroutine !> Resets the random number generator subroutine reset_rndgen ( this ) class ( rndgen ) :: this call this % init ( this % o_iseed ) end subroutine !> Save the current seeds to a seeds object and, optionally, to a file unit subroutine save_seed_rndgen ( this , u_mseed , und ) class ( rndgen ) :: this type ( rndSeed ), intent ( out ) :: u_mseed integer , intent ( in ), optional :: und u_mseed = this % seed if ( present ( und )) call u_mseed % saveToFile ( und ) end subroutine !> Read the seeds from a seeds object or, optionally, from a file unit subroutine read_seed_rndgen ( this , u_mseed , und ) class ( rndgen ) :: this type ( rndSeed ), intent ( in ) :: u_mseed integer , intent ( in ), optional :: und if ( present ( und )) call u_mseed % readFromFile ( und ) this % seed = u_mseed end subroutine !> Save the seeds to a file unit subroutine saveToFile_rndSeed ( this , und ) implicit none class ( rndSeed ) :: this integer , intent ( in ) :: und integer :: i write ( und , * ) ( this % mseed ( i ), i = 1 , 4 ) end subroutine !> Save the seeds to a file name subroutine saveToFile_filename_rndSeed ( this , filename ) implicit none class ( rndSeed ) :: this character ( len =* ), intent ( in ) :: filename integer :: und open ( newunit = und , file = filename , status = 'replace' , form = 'formatted' , action = 'write' ) call this % saveToFile ( und ) close ( und ) end subroutine !> Read the seeds from a file unit subroutine readFromFile_rndSeed ( this , und ) class ( rndSeed ) :: this integer , intent ( in ) :: und integer :: i read ( und , * ) ( this % mseed ( i ), i = 1 , 4 ) end subroutine !> Read the seeds from a file name subroutine readFromFile_filename_rndSeed ( this , filename ) class ( rndSeed ) :: this character ( len =* ), intent ( in ) :: filename integer :: und open ( newunit = und , file = filename , status = 'replace' , form = 'formatted' , action = 'write' ) call this % readFromFile ( und ) close ( und ) end subroutine !> Generates a random array of real numbers in the range [0, 1) function rnd_array_rnd ( gen , n ) result ( arr ) class ( rndgen ), intent ( in ) :: gen integer ( kind = i4 ), intent ( in ) :: n integer ( kind = i4 ) :: i real ( kind = dp ), allocatable :: arr (:) arr = [( gen % rnd (), i = 1 , n )] end function rnd_array_rnd !> Generates a random array of real numbers in the range [r1, r2) function rnd_array_real ( gen , n , r1 , r2 ) result ( arr ) class ( rndgen ), intent ( in ) :: gen integer ( kind = i4 ), intent ( in ) :: n real ( kind = dp ), intent ( in ) :: r1 , r2 integer ( kind = i4 ) :: i real ( kind = dp ), allocatable :: arr (:) arr = [( gen % real ( r1 , r2 ), i = 1 , n )] end function rnd_array_real function rnd_array_int_i4 ( gen , n , i1 , i2 ) result ( arr ) class ( rndgen ), intent ( in ) :: gen integer ( kind = i4 ), intent ( in ) :: n integer ( kind = i4 ), intent ( in ) :: i1 , i2 integer ( kind = i4 ) :: i integer ( kind = i4 ), allocatable :: arr (:) arr = [( gen % int_i4 ( i1 , i2 ), i = 1 , n )] end function rnd_array_int_i4 function rnd_array_int_i8 ( gen , n , i1 , i2 ) result ( arr ) class ( rndgen ), intent ( in ) :: gen integer ( kind = i4 ), intent ( in ) :: n integer ( kind = i8 ), intent ( in ) :: i1 , i2 integer ( kind = i4 ) :: i integer ( kind = i8 ), allocatable :: arr (:) arr = [( gen % int_i8 ( i1 , i2 ), i = 1 , n )] end function rnd_array_int_i8 end module","tags":"","url":"sourcefile/rndgen.f90.html"}]}