var tipuesearch = {"pages":[{"title":" RNDGEN module ","text":"RNDGEN module Fortran Module: RNDGEN Description The Fortran module RNDGEN implements the KISS (Keep It Simple Stupid) random number generator as an object, facilitating the usage of multiple and independent generators. The code adaptation is derived from Thomas Vojta 's implementation available at http://web.mst.edu/~vojtat/class_5403/kiss05/rkiss05.f90 . For reference, the original source code can be found here , with the following information: ! Random number generator KISS05 after a suggestion by George Marsaglia ! in \"Random numbers for C: The END?\" posted on sci . crypt . random - numbers ! in 1999 ! ! version as in \"double precision RNGs\" in sci . math . num - analysis ! http : //sci.tech-archive.net/Archive/sci.math.num-analysis/2005-11/msg00352.html ! ! The KISS ( Keep It Simple Stupid ) random number generator . Combines : ! ( 1 ) The congruential generator x ( n )= 69069 * x ( n - 1 ) + 1327217885 , period 2 &#94; 32 . ! ( 2 ) A 3 - shift shift - register generator , period 2 &#94; 32 - 1 , ! ( 3 ) Two 16 - bit multiply - with - carry generators , period 597273182964842497 > 2 &#94; 59 ! Overall period > 2 &#94; 123 ! ! ! A call to rkiss05 () gives one random real in the interval [ 0 , 1 ), ! i . e ., 0 <= rkiss05 < 1 ! ! Before using rkiss05 call kissinit ( seed ) to initialize ! the generator by random integers produced by Park / Millers ! minimal standard LCG . ! Seed should be any positive integer . ! ! FORTRAN implementation by Thomas Vojta , vojta @ mst . edu ! built on a module found at www . fortran . com ! ! ! History : ! v0 .9 Dec 11 , 2010 first implementation ! V0 .91 Dec 11 , 2010 inlined internal function for the SR component ! v0 .92 Dec 13 , 2010 extra shuffle of seed in kissinit ! v093 Aug 13 , 2012 changed inter representation test to avoid data statements Usage Copy the file src/rndgen.f90 or add the package as a dependency using the Fortran Package Manager (Fpm): [dependencies] rndgen-fortran . git = \"https://github.com/wcota/rndgen-fortran\" Import the module using use rndgen_mod , and/or use rndgenPL_mod for the power-law number generator. Create the generator object by using type ( rndgen ) :: generator The generator requires a positive integer as a seed to initialize the generator with Park/Millers minimal standard LCG: integer :: seed = 294727492 call generator % init ( seed ) To generate a random number, use: generator%rnd() for a real number in the range [0,1) generator%int(i1, i2) for an integer number in the range [i1, i2] generator%real(r1, r2) for a real number in the range [r1, r2) Reset the generator (to start again with the same sequence) with generator%reset() . rndSeed IO It is possible to save and read the generated seeds. For that, an rndSeed object needs to be declared as type ( rndSeed ) :: seeds To save, use call generator%save_seed(seeds, file_unit) , where file_unit refers to an opened file unit. It will save the current seed in the object and also write it to the file unit. To read from a rndSeed object, use call generator%read_seed(seeds) , or to read from a file unit, use call generator%read_seed(seeds, file_unit) . Power-law random number generator The module rndgenPL_mod extends the generator to an integer power-law distribution. The code was adapted from Silvio C. Ferreira 's codes. Declare the object with type(rndgenPL) :: generatorPL , and initialize it with call generatorPL%initPL(kmin, kmax, gamma, seed) , allowing the generation of random numbers following a power-law $P(k) \\sim k&#94;{-\\gamma}$ for $k \\in [k_\\text{min}, k_\\text{max}]$. To generate the number, use generatorPL%rndPL() . Running examples Using Fpm, execute: fpm test example to run the first example. The list of examples is as follows: example : Generates 10 random numbers between 0 and 1, integers between 5 and 2587, and floats between -5.2 and 100.9, resets, and repeats the process. example-vojta : Original example by Thomas Vojta, from https://web.mst.edu/vojtat/class_5403/kiss05/rtest.f90 example-save : Generates 10 random numbers, resets, and saves the state after 5 runs. Then, reads from the file. example-2gen : Runs two generators simultaneously. Usage: fpm test example-2gen -- seed1 seed2 example-2gen-invert : Same as the previous example, but swaps the seeds after a reset. example-PL : Generates four sequences of power-law distributed random numbers. Expected outputs are available at test/output-*.txt . Tested with gfortran , ifort , and ifx compilers. To use a specific compiler, run with fpm --compiler=ifort [...] . Developer Info Wesley Cota Assistant Professor of Physics at Federal University of Viçosa (UFV), Brazil","tags":"home","loc":"index.html"},{"title":"rndgenPL – RNDGEN module ","text":"type, public, extends( rndgen ) :: rndgenPL Random number generator object for power-law distribution, adapted from Silvio C. Ferreira code.\nThe power-law distribution is given by P(k) = k&#94;(-gamma), where k is an integer between kmin and kmax. Inherits type~~rndgenpl~~InheritsGraph type~rndgenpl rndgenPL type~rndgen rndgen type~rndgenpl->type~rndgen type~rndseed rndSeed type~rndgen->type~rndseed seed Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial integer, public :: o_iseed type( rndSeed ), public :: seed real(kind=dp), private :: AA real(kind=dp), private :: expo real(kind=dp), private :: x0 real(kind=dp), private :: xc real(kind=dp), public :: gamma integer(kind=i16), public :: kmin integer(kind=i16), public :: kmax real(kind=dp), private, allocatable :: prob (:) Type-Bound Procedures procedure, public :: rnd => rnd_rndgen private  function rnd_rndgen (this) result(rnd_number) Generates a random number in the range [0, 1) Arguments Type Intent Optional Attributes Name class( rndgen ) :: this Return Value real(kind=dp) procedure, public :: int => int_rndgen private  function int_rndgen (this, i1, i2) result(rnd_number) Generates a random integer number in the range [i1, i2] Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i16), intent(in) :: i1 integer(kind=i16), intent(in) :: i2 Return Value integer(kind=i16) procedure, public :: real => real_rndgen private  function real_rndgen (this, r1, r2) result(rnd_number) Generates a random real number in the range [r1, r2) Arguments Type Intent Optional Attributes Name class( rndgen ) :: this real(kind=dp), intent(in) :: r1 real(kind=dp), intent(in) :: r2 Return Value real(kind=dp) procedure, public :: init => init_rndgen private  subroutine init_rndgen (this, iseed) Initializes the random number generator Read more… Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i8) :: iseed procedure, public :: reset => reset_rndgen private  subroutine reset_rndgen (this) Resets the random number generator Arguments Type Intent Optional Attributes Name class( rndgen ) :: this procedure, public :: save_seed => save_seed_rndgen private  subroutine save_seed_rndgen (this, u_mseed, und) Save the current seeds to a seeds object and, optionally, to a file unit Arguments Type Intent Optional Attributes Name class( rndgen ) :: this type( rndSeed ), intent(out) :: u_mseed integer, intent(in), optional :: und procedure, public :: read_seed => read_seed_rndgen private  subroutine read_seed_rndgen (this, u_mseed, und) Read the seeds from a seeds object or, optionally, from a file unit Arguments Type Intent Optional Attributes Name class( rndgen ) :: this type( rndSeed ), intent(in) :: u_mseed integer, intent(in), optional :: und procedure, public :: rndPL => rndPL_rndgenPL private  function rndPL_rndgenPL (this) result(rnd_number) Generates a random number following the power-law distribution Arguments Type Intent Optional Attributes Name class( rndgenPL ) :: this Return Value integer(kind=i16) procedure, public :: initPL => initPL_rndgenPL private  subroutine initPL_rndgenPL (this, kmin, kmax, gama, iseed) Initializes the power-law random number generator Arguments Type Intent Optional Attributes Name class( rndgenPL ) :: this integer(kind=i16), intent(in) :: kmin integer(kind=i16), intent(in) :: kmax real(kind=dp), intent(in) :: gama integer, intent(in), optional :: iseed","tags":"","loc":"type/rndgenpl.html"},{"title":"rndSeed – RNDGEN module ","text":"type, public :: rndSeed Random seeds object Inherited by type~~rndseed~~InheritedByGraph type~rndseed rndSeed type~rndgen rndgen type~rndgen->type~rndseed seed type~rndgenpl rndgenPL type~rndgenpl->type~rndgen Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial integer(kind=i8), private :: mseed (4) Type-Bound Procedures procedure, public :: saveToFile => saveToFile_rndSeed private  subroutine saveToFile_rndSeed (this, und) Save the seeds to a file unit Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this integer, intent(in) :: und procedure, public :: readFromFile => readFromFile_rndSeed private  subroutine readFromFile_rndSeed (this, und) Read the seeds from a file unit Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this integer, intent(in) :: und","tags":"","loc":"type/rndseed.html"},{"title":"rndgen – RNDGEN module ","text":"type, public :: rndgen Random number generator object with its procedures Inherits type~~rndgen~~InheritsGraph type~rndgen rndgen type~rndseed rndSeed type~rndgen->type~rndseed seed Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Inherited by type~~rndgen~~InheritedByGraph type~rndgen rndgen type~rndgenpl rndgenPL type~rndgenpl->type~rndgen Help Graph Key Nodes of different colours represent the following: Graph Key Type Type This Page's Entity This Page's Entity Solid arrows point from a derived type to the parent type which it\nextends. Dashed arrows point from a derived type to the other\ntypes it contains as a components, with a label listing the name(s) of\nsaid component(s). Components Type Visibility Attributes Name Initial integer, public :: o_iseed type( rndSeed ), public :: seed Type-Bound Procedures procedure, public :: rnd => rnd_rndgen private  function rnd_rndgen (this) result(rnd_number) Generates a random number in the range [0, 1) Arguments Type Intent Optional Attributes Name class( rndgen ) :: this Return Value real(kind=dp) procedure, public :: int => int_rndgen private  function int_rndgen (this, i1, i2) result(rnd_number) Generates a random integer number in the range [i1, i2] Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i16), intent(in) :: i1 integer(kind=i16), intent(in) :: i2 Return Value integer(kind=i16) procedure, public :: real => real_rndgen private  function real_rndgen (this, r1, r2) result(rnd_number) Generates a random real number in the range [r1, r2) Arguments Type Intent Optional Attributes Name class( rndgen ) :: this real(kind=dp), intent(in) :: r1 real(kind=dp), intent(in) :: r2 Return Value real(kind=dp) procedure, public :: init => init_rndgen private  subroutine init_rndgen (this, iseed) Initializes the random number generator Read more… Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i8) :: iseed procedure, public :: reset => reset_rndgen private  subroutine reset_rndgen (this) Resets the random number generator Arguments Type Intent Optional Attributes Name class( rndgen ) :: this procedure, public :: save_seed => save_seed_rndgen private  subroutine save_seed_rndgen (this, u_mseed, und) Save the current seeds to a seeds object and, optionally, to a file unit Arguments Type Intent Optional Attributes Name class( rndgen ) :: this type( rndSeed ), intent(out) :: u_mseed integer, intent(in), optional :: und procedure, public :: read_seed => read_seed_rndgen private  subroutine read_seed_rndgen (this, u_mseed, und) Read the seeds from a seeds object or, optionally, from a file unit Arguments Type Intent Optional Attributes Name class( rndgen ) :: this type( rndSeed ), intent(in) :: u_mseed integer, intent(in), optional :: und","tags":"","loc":"type/rndgen.html"},{"title":"rndPL_rndgenPL – RNDGEN module","text":"private  function rndPL_rndgenPL(this) result(rnd_number) Generates a random number following the power-law distribution Type Bound rndgenPL Arguments Type Intent Optional Attributes Name class( rndgenPL ) :: this Return Value integer(kind=i16) Calls proc~~rndpl_rndgenpl~~CallsGraph proc~rndpl_rndgenpl rndgenPL_mod::rndgenPL%rndPL_rndgenPL proc~rnd_rndgen rndgen_mod::rndgen%rnd_rndgen proc~rndpl_rndgenpl->proc~rnd_rndgen Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/rndpl_rndgenpl.html"},{"title":"initPL_rndgenPL – RNDGEN module","text":"private  subroutine initPL_rndgenPL(this, kmin, kmax, gama, iseed) Initializes the power-law random number generator Type Bound rndgenPL Arguments Type Intent Optional Attributes Name class( rndgenPL ) :: this integer(kind=i16), intent(in) :: kmin integer(kind=i16), intent(in) :: kmax real(kind=dp), intent(in) :: gama integer, intent(in), optional :: iseed Calls proc~~initpl_rndgenpl~~CallsGraph proc~initpl_rndgenpl rndgenPL_mod::rndgenPL%initPL_rndgenPL proc~init_rndgen rndgen_mod::rndgen%init_rndgen proc~initpl_rndgenpl->proc~init_rndgen proc~rnd_rndgen rndgen_mod::rndgen%rnd_rndgen proc~init_rndgen->proc~rnd_rndgen Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/initpl_rndgenpl.html"},{"title":"rnd_rndgen – RNDGEN module","text":"private  function rnd_rndgen(this) result(rnd_number) Generates a random number in the range [0, 1) Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ) :: this Return Value real(kind=dp) Called by proc~~rnd_rndgen~~CalledByGraph proc~rnd_rndgen rndgen_mod::rndgen%rnd_rndgen proc~init_rndgen rndgen_mod::rndgen%init_rndgen proc~init_rndgen->proc~rnd_rndgen proc~int_rndgen rndgen_mod::rndgen%int_rndgen proc~int_rndgen->proc~rnd_rndgen proc~real_rndgen rndgen_mod::rndgen%real_rndgen proc~real_rndgen->proc~rnd_rndgen proc~rndpl_rndgenpl rndgenPL_mod::rndgenPL%rndPL_rndgenPL proc~rndpl_rndgenpl->proc~rnd_rndgen proc~initpl_rndgenpl rndgenPL_mod::rndgenPL%initPL_rndgenPL proc~initpl_rndgenpl->proc~init_rndgen proc~reset_rndgen rndgen_mod::rndgen%reset_rndgen proc~reset_rndgen->proc~init_rndgen Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/rnd_rndgen.html"},{"title":"int_rndgen – RNDGEN module","text":"private  function int_rndgen(this, i1, i2) result(rnd_number) Generates a random integer number in the range [i1, i2] Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i16), intent(in) :: i1 integer(kind=i16), intent(in) :: i2 Return Value integer(kind=i16) Calls proc~~int_rndgen~~CallsGraph proc~int_rndgen rndgen_mod::rndgen%int_rndgen proc~rnd_rndgen rndgen_mod::rndgen%rnd_rndgen proc~int_rndgen->proc~rnd_rndgen Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/int_rndgen.html"},{"title":"real_rndgen – RNDGEN module","text":"private  function real_rndgen(this, r1, r2) result(rnd_number) Generates a random real number in the range [r1, r2) Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ) :: this real(kind=dp), intent(in) :: r1 real(kind=dp), intent(in) :: r2 Return Value real(kind=dp) Calls proc~~real_rndgen~~CallsGraph proc~real_rndgen rndgen_mod::rndgen%real_rndgen proc~rnd_rndgen rndgen_mod::rndgen%rnd_rndgen proc~real_rndgen->proc~rnd_rndgen Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/real_rndgen.html"},{"title":"init_rndgen – RNDGEN module","text":"private  subroutine init_rndgen(this, iseed) Initializes the random number generator ! Test integer representation !!! Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i8) :: iseed Calls proc~~init_rndgen~~CallsGraph proc~init_rndgen rndgen_mod::rndgen%init_rndgen proc~rnd_rndgen rndgen_mod::rndgen%rnd_rndgen proc~init_rndgen->proc~rnd_rndgen Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module. Called by proc~~init_rndgen~~CalledByGraph proc~init_rndgen rndgen_mod::rndgen%init_rndgen proc~initpl_rndgenpl rndgenPL_mod::rndgenPL%initPL_rndgenPL proc~initpl_rndgenpl->proc~init_rndgen proc~reset_rndgen rndgen_mod::rndgen%reset_rndgen proc~reset_rndgen->proc~init_rndgen Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/init_rndgen.html"},{"title":"reset_rndgen – RNDGEN module","text":"private  subroutine reset_rndgen(this) Resets the random number generator Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ) :: this Calls proc~~reset_rndgen~~CallsGraph proc~reset_rndgen rndgen_mod::rndgen%reset_rndgen proc~init_rndgen rndgen_mod::rndgen%init_rndgen proc~reset_rndgen->proc~init_rndgen proc~rnd_rndgen rndgen_mod::rndgen%rnd_rndgen proc~init_rndgen->proc~rnd_rndgen Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/reset_rndgen.html"},{"title":"save_seed_rndgen – RNDGEN module","text":"private  subroutine save_seed_rndgen(this, u_mseed, und) Save the current seeds to a seeds object and, optionally, to a file unit Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ) :: this type( rndSeed ), intent(out) :: u_mseed integer, intent(in), optional :: und Calls proc~~save_seed_rndgen~~CallsGraph proc~save_seed_rndgen rndgen_mod::rndgen%save_seed_rndgen proc~savetofile_rndseed rndgen_mod::rndSeed%saveToFile_rndSeed proc~save_seed_rndgen->proc~savetofile_rndseed Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/save_seed_rndgen.html"},{"title":"read_seed_rndgen – RNDGEN module","text":"private  subroutine read_seed_rndgen(this, u_mseed, und) Read the seeds from a seeds object or, optionally, from a file unit Type Bound rndgen Arguments Type Intent Optional Attributes Name class( rndgen ) :: this type( rndSeed ), intent(in) :: u_mseed integer, intent(in), optional :: und Calls proc~~read_seed_rndgen~~CallsGraph proc~read_seed_rndgen rndgen_mod::rndgen%read_seed_rndgen proc~readfromfile_rndseed rndgen_mod::rndSeed%readFromFile_rndSeed proc~read_seed_rndgen->proc~readfromfile_rndseed Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/read_seed_rndgen.html"},{"title":"saveToFile_rndSeed – RNDGEN module","text":"private  subroutine saveToFile_rndSeed(this, und) Save the seeds to a file unit Type Bound rndSeed Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this integer, intent(in) :: und Called by proc~~savetofile_rndseed~~CalledByGraph proc~savetofile_rndseed rndgen_mod::rndSeed%saveToFile_rndSeed proc~save_seed_rndgen rndgen_mod::rndgen%save_seed_rndgen proc~save_seed_rndgen->proc~savetofile_rndseed Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/savetofile_rndseed.html"},{"title":"readFromFile_rndSeed – RNDGEN module","text":"private  subroutine readFromFile_rndSeed(this, und) Read the seeds from a file unit Type Bound rndSeed Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this integer, intent(in) :: und Called by proc~~readfromfile_rndseed~~CalledByGraph proc~readfromfile_rndseed rndgen_mod::rndSeed%readFromFile_rndSeed proc~read_seed_rndgen rndgen_mod::rndgen%read_seed_rndgen proc~read_seed_rndgen->proc~readfromfile_rndseed Help Graph Key Nodes of different colours represent the following: Graph Key Subroutine Subroutine Function Function Interface Interface Type Bound Procedure Type Bound Procedure Unknown Procedure Type Unknown Procedure Type Program Program This Page's Entity This Page's Entity Solid arrows point from a procedure to one which it calls. Dashed \narrows point from an interface to procedures which implement that interface.\nThis could include the module procedures in a generic interface or the\nimplementation in a submodule of an interface in a parent module.","tags":"","loc":"proc/readfromfile_rndseed.html"},{"title":"rndgenPL_mod – RNDGEN module","text":"Uses rndgen_mod module~~rndgenpl_mod~~UsesGraph module~rndgenpl_mod rndgenPL_mod module~rndgen_mod rndgen_mod module~rndgenpl_mod->module~rndgen_mod Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial integer, private, parameter :: dp = selected_real_kind(15) integer, private, parameter :: i8 = selected_int_kind(8) integer, private, parameter :: i16 = selected_int_kind(16) real(kind=dp), private, parameter :: am = 4.656612873077392578d-10 Derived Types type, public, extends( rndgen ) :: rndgenPL Random number generator object for power-law distribution, adapted from Silvio C. Ferreira code.\nThe power-law distribution is given by P(k) = k&#94;(-gamma), where k is an integer between kmin and kmax. Components Type Visibility Attributes Name Initial integer, public :: o_iseed type( rndSeed ), public :: seed real(kind=dp), private :: AA real(kind=dp), private :: expo real(kind=dp), private :: x0 real(kind=dp), private :: xc real(kind=dp), public :: gamma integer(kind=i16), public :: kmin integer(kind=i16), public :: kmax real(kind=dp), private, allocatable :: prob (:) Type-Bound Procedures procedure, public :: rnd => rnd_rndgen procedure, public :: int => int_rndgen procedure, public :: real => real_rndgen procedure, public :: init => init_rndgen procedure, public :: reset => reset_rndgen procedure, public :: save_seed => save_seed_rndgen procedure, public :: read_seed => read_seed_rndgen procedure, public :: rndPL => rndPL_rndgenPL procedure, public :: initPL => initPL_rndgenPL Functions private  function rndPL_rndgenPL (this) result(rnd_number) Generates a random number following the power-law distribution Arguments Type Intent Optional Attributes Name class( rndgenPL ) :: this Return Value integer(kind=i16) Subroutines private  subroutine initPL_rndgenPL (this, kmin, kmax, gama, iseed) Initializes the power-law random number generator Arguments Type Intent Optional Attributes Name class( rndgenPL ) :: this integer(kind=i16), intent(in) :: kmin integer(kind=i16), intent(in) :: kmax real(kind=dp), intent(in) :: gama integer, intent(in), optional :: iseed","tags":"","loc":"module/rndgenpl_mod.html"},{"title":"rndgen_mod – RNDGEN module","text":"Used by module~~rndgen_mod~~UsedByGraph module~rndgen_mod rndgen_mod module~rndgenpl_mod rndgenPL_mod module~rndgenpl_mod->module~rndgen_mod Help Graph Key Nodes of different colours represent the following: Graph Key Module Module Submodule Submodule Subroutine Subroutine Function Function Program Program This Page's Entity This Page's Entity Solid arrows point from a submodule to the (sub)module which it is\ndescended from. Dashed arrows point from a module or program unit to \nmodules which it uses. Variables Type Visibility Attributes Name Initial integer, private, parameter :: dp = selected_real_kind(15) integer, private, parameter :: i8 = selected_int_kind(8) integer, private, parameter :: i16 = selected_int_kind(16) real(kind=dp), private, parameter :: am = 4.656612873077392578d-10 Derived Types type, public :: rndSeed Random seeds object Components Type Visibility Attributes Name Initial integer(kind=i8), private :: mseed (4) Type-Bound Procedures procedure, public :: saveToFile => saveToFile_rndSeed procedure, public :: readFromFile => readFromFile_rndSeed type, public :: rndgen Random number generator object with its procedures Components Type Visibility Attributes Name Initial integer, public :: o_iseed type( rndSeed ), public :: seed Type-Bound Procedures procedure, public :: rnd => rnd_rndgen procedure, public :: int => int_rndgen procedure, public :: real => real_rndgen procedure, public :: init => init_rndgen procedure, public :: reset => reset_rndgen procedure, public :: save_seed => save_seed_rndgen procedure, public :: read_seed => read_seed_rndgen Functions private  function rnd_rndgen (this) result(rnd_number) Generates a random number in the range [0, 1) Arguments Type Intent Optional Attributes Name class( rndgen ) :: this Return Value real(kind=dp) private  function int_rndgen (this, i1, i2) result(rnd_number) Generates a random integer number in the range [i1, i2] Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i16), intent(in) :: i1 integer(kind=i16), intent(in) :: i2 Return Value integer(kind=i16) private  function real_rndgen (this, r1, r2) result(rnd_number) Generates a random real number in the range [r1, r2) Arguments Type Intent Optional Attributes Name class( rndgen ) :: this real(kind=dp), intent(in) :: r1 real(kind=dp), intent(in) :: r2 Return Value real(kind=dp) Subroutines private  subroutine init_rndgen (this, iseed) Initializes the random number generator Read more… Arguments Type Intent Optional Attributes Name class( rndgen ) :: this integer(kind=i8) :: iseed private  subroutine reset_rndgen (this) Resets the random number generator Arguments Type Intent Optional Attributes Name class( rndgen ) :: this private  subroutine save_seed_rndgen (this, u_mseed, und) Save the current seeds to a seeds object and, optionally, to a file unit Arguments Type Intent Optional Attributes Name class( rndgen ) :: this type( rndSeed ), intent(out) :: u_mseed integer, intent(in), optional :: und private  subroutine read_seed_rndgen (this, u_mseed, und) Read the seeds from a seeds object or, optionally, from a file unit Arguments Type Intent Optional Attributes Name class( rndgen ) :: this type( rndSeed ), intent(in) :: u_mseed integer, intent(in), optional :: und private  subroutine saveToFile_rndSeed (this, und) Save the seeds to a file unit Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this integer, intent(in) :: und private  subroutine readFromFile_rndSeed (this, und) Read the seeds from a file unit Arguments Type Intent Optional Attributes Name class( rndSeed ) :: this integer, intent(in) :: und","tags":"","loc":"module/rndgen_mod.html"},{"title":"rndgenPL.f90 – RNDGEN module","text":"This file depends on sourcefile~~rndgenpl.f90~~EfferentGraph sourcefile~rndgenpl.f90 rndgenPL.f90 sourcefile~rndgen.f90 rndgen.f90 sourcefile~rndgenpl.f90->sourcefile~rndgen.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code module rndgenPL_mod use rndgen_mod implicit none private integer , parameter :: dp = selected_real_kind ( 15 ) ! 8-byte reals integer , parameter :: i8 = selected_int_kind ( 8 ) ! 4-byte integers integer , parameter :: i16 = selected_int_kind ( 16 ) ! 8-byte integers real ( kind = dp ), parameter :: am = 4.656612873077392578d-10 ! multiplier 1/2&#94;31 !> Random number generator object for power-law distribution, adapted from Silvio C. Ferreira code. !> The power-law distribution is given by P(k) = k&#94;(-gamma), where k is an integer between kmin and kmax. type , extends ( rndgen ) :: rndgenPL ! auxiliar variables real ( kind = dp ), private :: AA , expo , x0 , xc ! parameters real ( kind = dp ) :: gamma integer ( kind = i16 ) :: kmin , kmax ! auxiliar distribution real ( kind = dp ), private , allocatable :: prob (:) contains procedure :: rndPL => rndPL_rndgenPL ! generates a random number following the power-law distribution procedure :: initPL => initPL_rndgenPL ! initializes the power-law random number generator end type public :: rndgenPL contains !> Initializes the power-law random number generator subroutine initPL_rndgenPL ( this , kmin , kmax , gama , iseed ) class ( rndgenPL ) :: this integer ( kind = i16 ), intent ( in ) :: kmin , kmax real ( kind = dp ), intent ( in ) :: gama integer , intent ( in ), optional :: iseed if ( present ( iseed )) call this % init ( iseed ) this % kmin = kmin this % kmax = kmax this % gamma = gama if ( allocated ( this % prob )) deallocate ( this % prob ) allocate ( this % prob ( kmin : kmax )) this % AA = 0 d0 block integer ( kind = kind ( kmax )) :: j do j = kmin , kmax this % AA = this % AA + ( 1.0_dp * j ) ** ( - gama ) this % prob ( j ) = ( 1.0_dp * j ) ** ( - gama ) end do this % AA = 1.0_dp / this % AA this % prob = this % AA * this % prob end block this % x0 = ( 1.0_dp * ( kmin - 1 )) ** ( - gama + 1.0_dp ) this % xc = ( 1.0_dp * kmax ) ** ( - gama + 1.0_dp ) this % expo = 1.0_dp / ( 1.0_dp - gama ) end subroutine !> Generates a random number following the power-law distribution function rndPL_rndgenPL ( this ) result ( rnd_number ) class ( rndgenPL ) :: this real ( kind = dp ) :: z , x integer ( kind = i16 ) :: j , rnd_number do z = this % rnd () x = ( this % x0 - z * ( this % x0 - this % xc )) ** this % expo j = ceiling ( x ) z = this % rnd () if (. not . z * this % AA / ( x ** this % gamma ) >= this % prob ( j )) exit end do rnd_number = j end function end module","tags":"","loc":"sourcefile/rndgenpl.f90.html"},{"title":"rndgen.f90 – RNDGEN module","text":"Files dependent on this one sourcefile~~rndgen.f90~~AfferentGraph sourcefile~rndgen.f90 rndgen.f90 sourcefile~rndgenpl.f90 rndgenPL.f90 sourcefile~rndgenpl.f90->sourcefile~rndgen.f90 Help Graph Key Nodes of different colours represent the following: Graph Key Source File Source File This Page's Entity This Page's Entity Solid arrows point from a file to a file which it depends on. A file\nis dependent upon another if the latter must be compiled before the former\ncan be. Source Code ! ## File: rndgen.f90 ! ## - module: random number generator. This is just a module to be used in another program. ! ## See README.md for more information and usage !----------------------------------------------------------------------------- ! KISS random generator module, as object: can have multiple and independent generators! ! IMPORTANT: ! THIS CODE WAS MODIFIED FROM http://web.mst.edu/~vojtat/class_5403/kiss05/rkiss05.f90 ! ! FORTRAN implementation by Thomas Vojta, vojta@mst.edu ! ! built on a module found at www.fortran.com ! ! Copyright (C) 2017 Wesley Cota ! !    This program is free software: you can redistribute it and/or modify !    it under the terms of the GNU General Public License as published by !    the Free Software Foundation, either version 3 of the License, or !    (at your option) any later version. ! !    This program is distributed in the hope that it will be useful, !    but WITHOUT ANY WARRANTY; without even the implied warranty of !    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the !    GNU General Public License for more details. ! !    You should have received a copy of the GNU General Public License !    along with this program.  If not, see <http://www.gnu.org/licenses/>. !----------------------------------------------------------------------------- ! Author    : Wesley Cota ! Email     : wesley@wcota.me ! Homepage  : http://wcota.me ! Date      : 25 Feb 2024 ! Version   : 0.3.1 !----------------------------------------------------------------------------- module rndgen_mod implicit none private integer , parameter :: dp = selected_real_kind ( 15 ) ! 8-byte reals integer , parameter :: i8 = selected_int_kind ( 8 ) ! 4-byte integers integer , parameter :: i16 = selected_int_kind ( 16 ) ! 8-byte integers real ( kind = dp ), parameter :: am = 4.656612873077392578d-10 ! multiplier 1/2&#94;31 !> Random seeds object type :: rndSeed integer ( kind = i8 ), private :: mseed ( 4 ) contains procedure :: saveToFile => saveToFile_rndSeed procedure :: readFromFile => readFromFile_rndSeed end type !> Random number generator object with its procedures type :: rndgen integer :: o_iseed ! seed used to generate the four new seeds type ( rndSeed ) :: seed contains procedure :: rnd => rnd_rndgen ! generates a random number in the range [0, 1) procedure :: int => int_rndgen ! generates a random integer number in the range [i1, i2] procedure :: real => real_rndgen ! generates a random real number in the range [r1, r2) procedure :: init => init_rndgen procedure :: reset => reset_rndgen procedure :: save_seed => save_seed_rndgen procedure :: read_seed => read_seed_rndgen end type public :: rndgen , rndSeed contains !> Generates a random number in the range [0, 1) function rnd_rndgen ( this ) result ( rnd_number ) ! KISS ! Adapted from <http://web.mst.edu/~vojtat/class_5403/kiss05/rkiss05.f90> by Thomas Vojta class ( rndgen ) :: this integer ( kind = i8 ) :: kiss real ( kind = dp ) :: rnd_number this % seed % mseed ( 1 ) = 69069 * this % seed % mseed ( 1 ) + 1327217885 this % seed % mseed ( 2 ) = ieor ( this % seed % mseed ( 2 ), ishft ( this % seed % mseed ( 2 ), 13 )); this % seed % mseed ( 2 ) = ieor ( this % seed % mseed ( 2 ), ishft ( this % seed % mseed ( 2 ), - 17 )); this % seed % mseed ( 2 ) = ieor ( this % seed % mseed ( 2 ), ishft ( this % seed % mseed ( 2 ), 5 )) this % seed % mseed ( 3 ) = 18000 * iand ( this % seed % mseed ( 3 ), 65535 ) + ishft ( this % seed % mseed ( 3 ), - 16 ) this % seed % mseed ( 4 ) = 30903 * iand ( this % seed % mseed ( 4 ), 65535 ) + ishft ( this % seed % mseed ( 4 ), - 16 ) kiss = ishft ( this % seed % mseed ( 1 ) + this % seed % mseed ( 2 ) + ishft ( this % seed % mseed ( 3 ), 16 ) + this % seed % mseed ( 4 ), - 1 ) rnd_number = kiss * am ! returns in range [0, 1) end function !> Generates a random integer number in the range [i1, i2] function int_rndgen ( this , i1 , i2 ) result ( rnd_number ) class ( rndgen ) :: this integer ( kind = i16 ), intent ( in ) :: i1 , i2 integer ( kind = i16 ) :: rnd_number rnd_number = min ( int ( this % rnd () * ( i2 + 1 - i1 )) + i1 , i2 ) ! returns in range [i1, i2] end function !> Generates a random real number in the range [r1, r2) function real_rndgen ( this , r1 , r2 ) result ( rnd_number ) class ( rndgen ) :: this real ( kind = dp ), intent ( in ) :: r1 , r2 real ( kind = dp ) :: rnd_number rnd_number = r1 + ( r2 - r1 ) * this % rnd () ! returns in range [r1, r2) end function !> Initializes the random number generator subroutine init_rndgen ( this , iseed ) ! Adapted from <http://web.mst.edu/~vojtat/class_5403/kiss05/rkiss05.f90> by Thomas Vojta class ( rndgen ) :: this integer ( kind = i8 ) :: idum , ia , im , iq , ir , iseed integer ( kind = i8 ) :: k , c1 real ( kind = dp ) :: rdum parameter ( ia = 16807 , im = 2147483647 , iq = 127773 , ir = 2836 ) iseed = abs ( iseed ) ! must be positive! this % o_iseed = iseed !!! Test integer representation !!! c1 = - 8 c1 = ishftc ( c1 , - 3 ) !     print *,c1 if ( c1 /= 536870911 ) stop 'Nonstandard integer representation. Stopped.' idum = iseed idum = abs ( 1099087573 * idum ) ! 32-bit LCG to shuffle seeds if ( idum == 0 ) idum = 1 if ( idum >= IM ) idum = IM - 1 k = ( idum ) / IQ idum = IA * ( idum - k * IQ ) - IR * k if ( idum < 0 ) idum = idum + IM if ( idum < 1 ) then this % seed % mseed ( 1 ) = idum + 1 else this % seed % mseed ( 1 ) = idum end if k = ( idum ) / IQ idum = IA * ( idum - k * IQ ) - IR * k if ( idum < 0 ) idum = idum + IM if ( idum < 1 ) then this % seed % mseed ( 2 ) = idum + 1 else this % seed % mseed ( 2 ) = idum end if k = ( idum ) / IQ idum = IA * ( idum - k * IQ ) - IR * k if ( idum < 0 ) idum = idum + IM if ( idum < 1 ) then this % seed % mseed ( 3 ) = idum + 1 else this % seed % mseed ( 3 ) = idum end if k = ( idum ) / IQ idum = IA * ( idum - k * IQ ) - IR * k if ( idum < 0 ) idum = idum + IM if ( idum < 1 ) then this % seed % mseed ( 4 ) = idum + 1 else this % seed % mseed ( 4 ) = idum end if rdum = this % rnd () ! warm up the generator with the first random number end subroutine !> Resets the random number generator subroutine reset_rndgen ( this ) class ( rndgen ) :: this call this % init ( this % o_iseed ) end subroutine !> Save the current seeds to a seeds object and, optionally, to a file unit subroutine save_seed_rndgen ( this , u_mseed , und ) class ( rndgen ) :: this type ( rndSeed ), intent ( out ) :: u_mseed integer , intent ( in ), optional :: und u_mseed = this % seed if ( present ( und )) call u_mseed % saveToFile ( und ) end subroutine !> Read the seeds from a seeds object or, optionally, from a file unit subroutine read_seed_rndgen ( this , u_mseed , und ) class ( rndgen ) :: this type ( rndSeed ), intent ( in ) :: u_mseed integer , intent ( in ), optional :: und if ( present ( und )) call u_mseed % readFromFile ( und ) this % seed = u_mseed end subroutine !> Save the seeds to a file unit subroutine saveToFile_rndSeed ( this , und ) implicit none class ( rndSeed ) :: this integer , intent ( in ) :: und integer :: i write ( und , * ) ( this % mseed ( i ), i = 1 , 4 ) end subroutine !> Read the seeds from a file unit subroutine readFromFile_rndSeed ( this , und ) class ( rndSeed ) :: this integer , intent ( in ) :: und integer :: i read ( und , * ) ( this % mseed ( i ), i = 1 , 4 ) end subroutine end module","tags":"","loc":"sourcefile/rndgen.f90.html"}]}